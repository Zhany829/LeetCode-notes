时间O(nmin(n,k))
空间 用二维数组O(n * min(n,k))  用一维数组O(min(n,k))
class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        if (n <= 1) return 0;
        int[][] buy = new int[n][k+1]; //表示价格0...n，交易k次后还有一支股票在手上得到的利润
        int[][] sell = new int[n][k+1]; //表示价格0...n，交易k次手上没股票得到的利润
        buy[0][0] = -prices[0]; //第0天以prices[i]买入股票， 所以收益是-prices[i]
        sell[0][0] = 0;         //不做任何事
        for (int i = 1; i < k+1; i++) {
            buy[0][i] = Integer.MIN_VALUE/2; // 表示不合法
            sell[0][i] = Integer.MIN_VALUE/2; // 表示不合法
        }
        for (int i = 1; i < n; i++) {
            buy[i][0] = Math.max(buy[i-1][0], sell[i-1][0]-prices[i]); //防止下面buy[i-1][j-1]溢出
            for (int j = 1; j < k+1; j++) {
                buy[i][j] = Math.max(buy[i-1][j], sell[i-1][j]-prices[i]);//不买-用前一利润｜买-之前买了的-花钱买的
                sell[i][j] = Math.max(sell[i-1][j], buy[i-1][j-1]+prices[i]);//不卖｜卖-用之前和上笔交易+卖的利润
            }
        }
        return Arrays.stream(sell[n - 1]).max().getAsInt();
    }
}

注意到在状态转移方程中，buy[i][j] 和 sell[i][j] 都从buy[i−1][..] 以及 sell[i−1][..]转移而来，因此我们可以使用一维数组而不是二维数组进行状态转移
class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        if (n <= 1) return 0;
        int[] buy = new int[k+1];
        int[] sell = new int[k+1];
        buy[0] = -prices[0];
        sell[0] = 0;
        for (int i = 1; i < k+1; i++) {
            buy[i] = sell[i] = Integer.MIN_VALUE/2;
        }
        for (int i = 1; i < n; i++) {
            buy[0] = Math.max(buy[0], sell[0]-prices[i]);
            for (int j = 1; j < k+1; j++) {
                buy[j] = Math.max(buy[j], sell[j]-prices[i]);
                sell[j] = Math.max(sell[j], buy[j-1]+prices[i]);
            }
        }
        int max = 0;
        for (int i = 0; i < k+1; i++) {
            if (sell[i] > max) max = sell[i];
        }
        return max;
    }
}
