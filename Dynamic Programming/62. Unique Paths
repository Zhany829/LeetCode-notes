解法：dp，时空m*n
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) { //长或着宽=0，初始化为1
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]; //加上左边和上面的值
                }
            }
        }
        return dp[m-1][n-1];
    }
}
解法2:优化的dp，时间m*n，空间n。因为dp[i][j]依赖dp[i-1][j]和dp[i][j-1]，而且遍历的时候是一行行遍历的，因为m在外层，所以就用一维数组在每一层更新就行。
class Solution {
    public int uniquePaths(int m, int n) {
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[j] += dp[j-1];
            }
        }
        return dp[n-1];
    }
}
