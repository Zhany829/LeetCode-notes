解法1:用两个dp，一个选第1个但不选最后一个，也就是输出n-2的dp
另一个不选第1个但选最后一个，也就是输出n-1的dp

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) return nums[0];
        int[] dp0 = new int[n];
        int[] dp1 = new int[n];
        dp0[0] = dp0[1] = nums[0]; // 选第一个不选第二个
        dp1[1] = nums[1];          // 选第二个不选第一个
        for (int i = 2; i < n; i++) {
            dp0[i] = Math.max(dp0[i-1], dp0[i-2]+nums[i]);
            dp1[i] = Math.max(dp1[i-1], dp1[i-2]+nums[i]);
        }
        return Math.max(dp0[n-2], dp1[n-1]);
    }
}

解法2：把环拆成两个队列,一个是从0到n-1,另一个是从1到n，然后返回两个结果最大的
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) return nums[0];
        return Math.max(getOptimal(nums, 0, n-2), getOptimal(nums, 1, n-1));
    }
    private int getOptimal(int[] nums, int start, int end) {
        int pre1 = 0, pre2 = 0;
        for (int i = start; i <= end; i++) {
            int cur = Math.max(pre1, pre2 + nums[i]);
            pre2 = pre1;
            pre1 = cur;
        }
        return pre1;
    }
}

