原问题等同于： 找到nums一个正子集和一个负子集，使得总和等于target

我们假设P是正子集，N是负子集 例如： 假设nums = [1, 2, 3, 4, 5]，target = 3，一个可能的解决方案是+1-2+3-4+5 = 3 这里正子集P = [1, 3, 5]和负子集N = [2, 4]

那么让我们看看如何将其转换为子集求和问题：

                  sum(P) - sum(N) = target
sum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N)
                       2 * sum(P) = target + sum(nums)
因此，原来的问题已转化为一个求子集的和问题： 找到nums的一个子集 P，使得sum(P) = (target + sum(nums)) / 2

所以题目就是找到能组成子集(target + sum(nums))/2的方式有多少种
dp[i][j]表示前面i个数组成j的方式

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum < target || (sum+target) % 2 == 1) return 0; // 全加起来也达不到sum
        int W = (target + sum)/2;
        int[] dp = new int[W+1];
        dp[0] = 1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = W; j >= nums[i]; j--) {
                dp[j] = dp[j] + dp[j-nums[i]]; //能组成j的子集的数量
            }
        }
        return dp[W];
    }
}
