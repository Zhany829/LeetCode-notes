解法1：dp[i] 为考虑前i个元素，以第i个数字结尾的最长上升子序列的长度，注意nums[i]必须被选取。
我们从小到大计算dp 数组的值，在计算dp[i] 之前，我们已经计算出dp[0…i−1] 的值，则状态转移方程为：dp[i]=max(dp[j])+1,其中0≤j<i且num[j]<num[i]
即考虑往dp[0…i−1] 中最长的上升子序列后面再加一个nums[i]。由于dp[j] 代表nums[0…j] 中以nums[j] 结尾的最长上升子序列，所以如果能从dp[j] 这个状态转移过来，那么nums[i] 必然要大于nums[j]，才能将nums[i] 放在nums[j] 后面以形成更长的上升子序列。
最后，整个数组的最长上升子序列即所有dp[i] 中的最大值。
LIS length = max(dp[i]),其中0≤i<n

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = 1;
        int max = 1;
        for (int i = 1; i < n; i++) {
            dp[i] = 1;  //初始化，最短的递增子序列也有1
            for (int j = 0; j < n; j++) {
                if (nums[i] > nums[j]) { //比较当前数比之前哪个递增序列的尾大，大就用这个序列长度+1去比较
                    dp[i] = Math.max(dp[i], dp[j]+1);
                }
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}

时间复杂度O(nlogn)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n+1];
        int res = 1;
        dp[res] = nums[0];
        for (int i = 1; i < n; i++) {
            if (dp[res] < nums[i]) {  //插入在后面来延长子序列的长
                dp[++res] = nums[i];
            } else {    //去找比当前小的替换掉
                int l = 1, r = res, pos = 0;
                while (l <= r) {
                    int mid = l + (r-l)/2;
                    if (dp[mid] < nums[i]) {
                        pos = mid;
                        l = mid+1;
                    } else {
                        r = mid - 1;
                    }
                }
            dp[pos+1] = nums[i];
            }
        }
        return res;
    }
}
