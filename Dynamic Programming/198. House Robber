解法：用dp数组记录当前位置最大值(i-2的值+当前值 or 前一个值)
class Solution {
    public int rob(int[] nums) {
        if (nums.length < 2) return nums[0];
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i < nums.length; i++) {
            dp[i] = Math.max(dp[i-1], dp[i-2]+nums[i]); //用前前的+现在 去比较前的
        }
        return dp[dp.length-1];
    }
}

节省空间：
class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) return nums[0];
        int pre1 = 0;
        int pre2 = 0;
        for (int i = 0; i < nums.length; i++) {
            int cur = Math.max(pre1, pre2+nums[i]);
            pre2 = pre1;
            pre1 = cur;
        }
        return pre1;
    }
}
