解法：先用数组存每个单词的长度和里面每个字母是否存在，用一个int来记录如果一个字母存在，则在这个字母-'a'的位置上把bit置为1.之后数组里每个元素都分别记录了一个单词的bit(有些为置1)
再逐一比较，所以O(n^2)，如果两个单词的bits能作与==0则说明没重复单词

置1的方法是获得单词位子去左移1

class Solution {
    public int maxProduct(String[] words) {
        int max = 0, n = words.length;
        int[] mask = new int[n];
        int[] len = new int[n];
        for (int i = 0; i < n; i++) {
            int bitmask = 0;
            for (char c : words[i].toCharArray()) {
                bitmask |= 1 << (c - 'a');  // 变量记录每个单词(用置1表示)
            }
            mask[i] = bitmask; //把当前word的字母bit结果放进来
            len[i] = words[i].length(); //记录当前单词长度
        }
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                if ((mask[i] & mask[j]) == 0) { //能等于0表示没重复单词
                    max = Math.max(max, len[i]*len[j]);
                }
            }
        }
        return max;
    }
}

