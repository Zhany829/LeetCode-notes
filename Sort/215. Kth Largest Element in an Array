用二分的去找partition返回的下标是不是正好是k，是的话就返回,因为说明array里k的位置上是第k大的数字
用random生成随机pivot的index，这样可以使得第一次选最小的第二次选第二小的这种概率降低
class Solution {
    private static Random random = new Random();
    public int findKthLargest(int[] nums, int k) {
        k = nums.length - k;
        int l = 0, r = nums.length-1;
        while (l < r) {
            int split = partition(nums, l, r);
            if (split == k) break;
            else if (split < k) l = split+1;
            else r = split-1;
        }
        return nums[k];
    }
    private int partition(int[] nums, int low, int high) {
        int leftMark = low;
        int rightMark = high+1;
        int randomIdx = low + random.nextInt(high-low+1);
        swap(nums, low, randomIdx);
        int pivot = nums[low];
        while (true) {
            while (nums[++leftMark] < pivot && leftMark < high);
            while (nums[--rightMark] > pivot && rightMark > low);
            if (leftMark >= rightMark) break;
            swap(nums, leftMark, rightMark);
        }
        swap(nums, rightMark, low); //这里换是因为low是pivot位置，rightMark和low交换后，pivot换到了左边都小于他，右边都大于他的位置(rightMark没换的位置保证了这个条件)
        return rightMark;
    }
    private void swap(int[] nums, int l, int r) {
        int tmp = nums[l];
        nums[l] = nums[r];
        nums[r] = tmp;
    }
}

