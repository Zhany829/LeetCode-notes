解法：首先先定义8个方向(到时候去测试往8个方向走哪些不会溢出),并且判断起点是不是阻塞的(是不是1)，是的话直接返回。
之后把起点加到queue里，只要queue里还有东西，用size记录queue里元素数量，size=0说明一轮结束了，
每轮都先poll出一个位置(元素)，如果这个位置正好是右下角，则直接返回步数，否则就去把这个位置的8个方向的为0的位置都加到queue并且把当前位置标记为1。每轮过后才把步数+1
 

class Solution {
    int[][] directions = new int[][]{{1,0},{-1,0},{0,1},{0,-1},{1,-1},{1,1},{-1,1},{-1,-1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        if (grid[0][0] == 1) return -1;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0,0});
        grid[0][0] = 1;
        int res = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                int[] cur = queue.poll();
                if (cur[0] == m-1 && cur[1] == n-1) return res;
                for (int[] d : directions) {
                    int x = cur[0] + d[0], y = cur[1] + d[1];
                    if (x < 0 || x > m-1 || y < 0 || y > n-1 || grid[x][y] == 1) continue;
                    queue.add(new int[]{x,y});
                    grid[x][y] = 1;
                }
            }
            res++;
        }
        return -1;
    }
}
