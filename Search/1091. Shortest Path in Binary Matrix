解法：首先先定义8个方向(到时候去测试往8个方向走哪些不会溢出),并且判断起点是不是阻塞的(是不是1)，是的话直接返回。
之后把起点加到queue里，只要queue里还有东西，用size记录queue里元素数量，size=0说明一轮结束了，
每轮都先poll出一个位置(元素)，如果这个位置正好是右下角，则直接返回步数，否则就去把这个位置的8个方向的为0的位置都加到queue并且把当前位置标记为1。每轮过后才把步数+1
 

class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return -1;
        int m = grid.length;
        int n = grid[0].length;
        if (grid[0][0] == 1) return -1; // 起点就阻塞了
        // 定义8个方向
        int[][] directions = new int[][]{{0,1},{0,-1},{1,0},{-1,0},{1,1},{-1,1},{1,-1},{-1,-1}};
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0,0}); //放进起点
        int res = 1; // 记录要走的步数
        grid[0][0] = 1; // 起点走过就标记为阻塞
        while (!queue.isEmpty()) { // BFS套路
            int size = queue.size();
            while (size-- > 0) {
                int[] cur = queue.poll(); //把BFS扫到的地点拿出来
                int x = cur[0];
                int y = cur[1];
                // 如果拿出来发现是最右下角直接返回
                if (x == m-1 && y == n-1) return res;
                // 在这个点8个方向判断
                for (int[] d : directions) {
                    int x1 = x + d[0];
                    int y1 = y + d[1];
                    //过滤掉不合法的点
                    if (x1 < 0 || x1 >= m || y1 < 0 || y1 >= n || grid[x1][y1] == 1) {
                        continue;
                    } 
                    // 把不阻塞，也就是0的点放入到队列
                    queue.add(new int[]{x1, y1});
                    grid[x1][y1] = 1; //标记
                }
            }
            res++;  //遍历完一层，步数+1
        }
        return -1;
    }
}
