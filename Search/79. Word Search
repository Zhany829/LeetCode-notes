设函数check(i,j,k) 表示判断以网格的 (i,j) 位置出发，能否搜索到单词word[k..]，其中word[k..] 表示字符串word 从第 k 个字符开始的后缀子串。
如果能搜索到，则返回true，反之返回false。函数check(i,j,k) 的执行步骤如下：
如果board[i][j] != s[k]，当前字符不匹配，直接返回false。
如果当前已经访问到字符串的末尾，且对应字符依然匹配，此时直接返回true。
否则，遍历当前位置的所有相邻位置。如果从某个相邻位置出发，能够搜索到子串word[k+1..]，则返回true，否则返回false。
这样，我们对每一个位置 (i,j) 都调用函数check(i,j,0) 进行检查：只要有一处返回true，就说明网格中能够找到相应的单词，否则说明不能找到。
为了防止重复遍历相同的位置，需要额外维护一个与board 等大的visited 数组，用于标识每个位置是否被访问过。每次遍历相邻位置时，需要跳过已经被访问的位置


class Solution {
    int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
    int m,n;
    public boolean exist(char[][] board, String word) {
        m = board.length;
        n = board[0].length;
        boolean[][] visited = new boolean[m][n];    //避免单次递归重复访问
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) { 
                if (check(board, word, i, j, visited, 0)) return true; //从每个点开始check，找到就返回true
            }
        }
        return false;
    }
    private boolean check(char[][]board, String word, int i, int j, boolean[][] visited, int k) {
        if (board[i][j] != word.charAt(k)) return false;  //此时不是目标单词里的一个char
        else if (k == word.length()-1) return true; //找到目标单词(里的一个char)
        visited[i][j] = true;
        for (int[] d : directions) {    //向四周扩散去找
            int x1 = i + d[0];
            int y1 = j + d[1];
            if (x1 < 0 || x1 > m-1 || y1 < 0 || y1 > n-1 || visited[x1][y1]) continue;
            if (check(board, word, x1, y1, visited, k+1)) return true;  //之前找到了才会到这步，所以k+1
        }
        visited[i][j] = false;  //回溯，递归结束把标记去掉
        return false;
    }
}
