解法:题目意思是abc abf只能说明c在f之前,a和b不能说明顺序.所以刚开始先构建图,用Map<Character, Ser<Character>>来存排在某个字母后面的字母,也就是用set来存后面的字母.
每次比较当前str和后一个str,取他们最长的长度最为length来第二层遍历,如果当前遍历超过了第一个str的长度就break,不然会报错,如果超过了第二个str的长度就直接返回"",因为是"abc","ab"这种情况 不合法
每次遍历检查到char一样就continue,否则先得到一个set,也就是用map.getOrDefault(字母,new Set<Character>),在set里加上这次遍历的这个字母的后一个字母,然后保存到map里
再设置度,先把26个字母的度设为-1,再把input里的出现的字母设为-1,这样没出现的就是-1.再去遍历map里每个key的set,把里面每个字母的入读++,因为他们都是由key来的
再用stringBuilder来存结果,用一个变量来存图里的节点数,如果最后sb长度和变量大小不一样说明有环,返回"". 遍历度的数组,如果不是-1就代表有一个节点就把cnt++,如果入读是0就加到queue
再遍历这个queue,每次poll出一个字母加到sb,再看如果这个字母是map里的key,就是还有后面字母就遍历他的set,把set里的字母入读--,如果入读是0了就放到queue里

class Solution {
    public String alienOrder(String[] words) {
        //1.构建图
        Map<Character, Set<Character>> map = new HashMap<>();
        for (int i = 0; i < words.length - 1; i++) {
            int len = Math.max(words[i].length(), words[i+1].length());
            for (int j = 0; j < len; j++) {
                // 这里是个坑 要防止 abc -> ab 这种情况
                if (j >= words[i].length()) break;
                if (j >= words[i+1].length()) return "";
                //如果字符相同，比较下一个
                if (words[i].charAt(j) == words[i + 1].charAt(j)) continue;
                //保存第一个不同的字符顺序
                Set<Character> set = map.getOrDefault(words[i].charAt(j), new HashSet<>());
                set.add(words[i + 1].charAt(j));
                map.put(words[i].charAt(j), set);
                break;
            }
        }

        //2.拓扑排序
        //创建保存入度的数组
        int[] degrees = new int[26];
        Arrays.fill(degrees, -1);
        //注意，不是26字母都在words中出现，所以出度分为两种情况：没有出现的字母出度为-1，出现了的字母的出度为非负数
        for (String str : words) {
            //将出现过的字符的出度设定为0
            for (char c : str.toCharArray())
                degrees[c - 'a'] = 0;
        }
        for (char key : map.keySet()) {
            for (char val : map.get(key)) {
                degrees[val - 'a']++;
            }
        }
        //创建StringBuilder保存拓扑排序
        StringBuilder sb = new StringBuilder();
        //创建一个Queue保存入度为0的节点
        Queue<Character> list = new LinkedList<>();

        int count = 0;//计算图中节点数
        for (int i = 0; i < 26; i++) {
            if (degrees[i] != -1) count++;
            if (degrees[i] == 0) {
                list.add((char) ('a' + i));
            }
        }

        while (!list.isEmpty()) {
            Character cur = list.poll();
            sb.append(cur);
            //将邻接点出度-1
            if (map.containsKey(cur)) {
                Set<Character> set = map.get(cur);
                for (Character c : set) {
                    degrees[c - 'a']--;
                    if (degrees[c - 'a'] == 0) list.add(c);
                }
            }
        }

        //判断是否有环
        if (sb.length() != count) return "";
        else return sb.toString();

    }
}

 
