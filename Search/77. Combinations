解法：回溯方法里，先判断如果cur达到了k，那么就把这个组合加到res，下面for loop遍历startIndex到n，cur先加i，再递归(用i+1)，最后回溯-把cur里的最后一个元素移除
剪枝：如果 n = 7, k = 4，从5开始搜索就已经没有意义了，这是因为：即使把5选上，后面的数只有6和7了，一共就3个数，凑不出4个数的组合。因此，搜索起点有上界。
        搜索起点的上界 + 接下来要选择的元素个数 - 1 = n
        接下来要选择的元素个数 = k - path.size()，所以
        搜索起点的上界 = n - (k - path.size()) + 1

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    LinkedList<Integer> path = new LinkedList<>();
    public List<List<Integer>> combine(int n, int k) {
        combineHelper(n, k, 1);
        return result;
    }
    private void combineHelper(int n, int k, int startIndex){
        //终止条件
        if (path.size() == k) {
            result.add(new ArrayList<>(path));
            return;
        } 
         //实现剪枝： 如果 还要找的数 > 可选择的个数  -> 填充不完    ->>>这里确定起点的关系
        for (int i = startIndex; i <= n - (k - path.size()) + 1; i++){ 
            path.add(i);                //尾添加
            combineHelper(n, k, i + 1); //i+1是为了不重复 模拟树形
            path.removeLast();      // 回溯 dfs遍历
        }
    }
}
