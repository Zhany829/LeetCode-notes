解法:先把所有0的坐标放到queue并且标记被访问过,之后去poll,每次去这个元素四周看,如果四周元素没超边界而且没被访问过(只能是1了),则在distance的2D数组里存poll的元素的距离+1.再标记这个元素

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        int[][] distance = new int[m][n];
        int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    queue.add(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            for (int[] d : directions) {
                int x = cur[0] + d[0];
                int y = cur[1] + d[1];
                if (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y]) {
                    distance[x][y] = distance[cur[0]][cur[1]] + 1;
                    visited[x][y] = true;
                    queue.add(new int[]{x,y});
                }
            }
        }
        return distance;
    }
}
