解法1：DFS，把当前的点的四周去探索到的区域都置为0，再++岛屿数量，所以每次都能把一块岛屿全变成0
class Solution {
    int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
    int m, n;
    public int numIslands(char[][] grid) {
        m = grid.length;
        n = grid[0].length;
        int num = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != '0') { //有岛屿的情况去把这个岛屿的地方都变成0
                    dfs(grid, i, j);    //去探索这个点所在的岛屿，并且置0
                    num++;  // count这个岛屿进来
                }
            }
        }
        return num;
    }
    private void dfs(char[][] grid, int i, int j) {
        if (i < 0 || i > m-1 || j < 0 || j > n-1 || grid[i][j] == '0') {
            return;
        }
        grid[i][j] = '0';
        for (int[] d : directions) {
            dfs(grid, i+d[0], j+d[1]); //去四周探索
        }
    }
}
解法2:BFS，一般dfs转变成bfs的都不用去看size，因为没有层的概念，只是把四周去探索完
class Solution {
    int m, n;
    int[][] directions = {{1,0}, {-1,0},{0,1},{0,-1}};
    public int numIslands(char[][] grid) {
        int res = 0;
        m = grid.length;
        n = grid[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '0') continue;
                res++;
                Queue<int[]> queue = new LinkedList<>();    
                queue.add(new int[]{i, j});
                grid[i][j] = '0';
                while (!queue.isEmpty()) {
                    int[] cur = queue.poll();
                    int x = cur[0], y = cur[1];
                    for (int[] d : directions) {
                        int x1 = x + d[0], y1 = y + d[1];
                        if (x1 < 0 || x1 > m-1 || y1 < 0 || y1 > n-1 || grid[x1][y1] == '0'){
                            continue;
                        }
                        grid[x1][y1] = '0';
                        queue.add(new int[]{x1, y1});
                    }
                }
            }
        }
        return res;
    }
}
解法3:并查集, 先创建一个并查集的类,构造器里初始化并查的大小(m*n), 集合parent-都是自己, 每个集合的秩rank-都=1,方法有find,union(每次合并都减小1个并查的范围,也就是一个1的地)
之后在主方法里双层loop判断如果当前是海,则海的cnt++, 否则是岛屿的话去左边和上面,如果也是岛屿的情况下去合并,但i或者j要大于0.
最后每次合并一个岛都会在总面积上减去岛屿面积-1, 所以最后用减去了每块岛面积-1的面积再减海就剩下岛数,因为每块岛面积cnt可以看作是1

class Solution {
    public int m, n;
    public int numIslands(char[][] grid) {
        m = grid.length;
        n = grid[0].length;
        int sea = 0;
        UnionFind unionFind = new UnionFind(m*n);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '0') { //遇到海的地方
                    sea++;
                } else { //去看左边和上面,如果是岛就合并
                    if (i > 0 && grid[i-1][j] == '1') unionFind.union(i*n+j, (i-1)*n+j);
                    if (j > 0 && grid[i][j-1] == '1') unionFind.union(i*n+j, i*n+j-1);
                }
            }
        }
        return unionFind.getCnt() - sea;//总块数-(每块岛的面积-1,因为合并成一块)-海的块数 = 岛数
    }
}

public class UnionFind {
    int[] parent = null;
    int[] rank = null;
    int cnt = 0;
    public UnionFind(int n) {
        this.cnt = n;
        parent = new int[n];
        rank = new int[n];
        for (int i = 0; i < n; i++) { //初始化
            parent[i] = i;
            rank[i] = 1;
        }
    }
    public int getCnt() { return this.cnt;}
    public int find(int a) {
        if (a != parent[a]) parent[a] = find(parent[a]);
        return parent[a];
    }
    public void union(int a, int b) { //合并掉一块岛所以cnt--
        int pa = find(a);
        int pb = find(b);
        if (pa == pb) return;
        if (rank[pa] > rank[pb]) {
            parent[pb] = pa;
            rank[pa] += rank[pb];
        } else {
            parent[pa] = pb;
            rank[pb] += pa;
        }
        cnt--;
    }
}


