解法：和之前一题一样，但额外要1.先排序数组让相同的数字都相邻，2.在每次添加的时候遇到和前一个数字一样，而且前一个数字被没被访问过就continue
如果nums[i-1]访问过了，回溯到num[i]的时候，nums[i-1]的状态已经被清空了(visited里标记为false)，所以如果vis[i-1]的状态是访问过的(被标记为false了)，说明被访问过了直接跳过
时间复杂度O(N*N!)  N是复制到答案数组的时间 N!是backTrack调用时间
核心在于理解,可以把nums数组看成待取用,而check数组看成跟递归层同步,逐个用nums中的数字填满check的位置

if i > 0 and nums[i] == nums[i-1] and check[i-1] == 0
表示当前数字与之前的数字重复,并且已经考虑过在第i-1位置放置nums[i-1]这个数字的所有排列了(check[i-1] == 0),
即结果数组中i-1位置不再考虑放置相同数字,只考虑不同数字.应该跳过当前相同的数字. 
check[i-1]只有在未使用和使用过后因回溯重置为0.为什么本题中一定是使用过后因回溯重置为0呢?
因为这条if判断语句必须先满足前一个条件才能走到check[i-1]这里,前面是 nums[i] == nums[i-1] ,即当前数字与之前数字相同.
说明我们遇到了第一次重复的数字,而相同数字在相邻位置的排列结果是重复的,可以剪枝. 解释不清或错误请反馈,会及时修改.

class Solution {
    List<List<Integer>> res = new ArrayList<>();
    int n;
    public List<List<Integer>> permuteUnique(int[] nums) {
        n = nums.length;
        boolean[] visited = new boolean[n];
        List<Integer> cur = new ArrayList<>();
        Arrays.sort(nums);  //使得之后好判断前一个是不是相同的数，是不是用过了
        backTrack(nums, visited, cur);
        return res;
    }
    private void backTrack(int[] nums, boolean[] visited, List<Integer> cur) {
        if (cur.size() == n) {
            res.add(new ArrayList<>(cur));
            return;
        }
        for (int i = 0; i < n; i++) {
            //和前一个数字一样，而且前一个数字用过了(被置为false)就continue； 
            if (i > 0 && nums[i] == nums[i-1] && !visited[i-1]) {  
                continue;
            }
            if (visited[i]) {
                continue;
            }
            visited[i] = true;
            cur.add(nums[i]);
            backTrack(nums, visited, cur);
            cur.remove(cur.size()-1);   //回溯
            visited[i] = false;         //回溯
        }
    }
}
