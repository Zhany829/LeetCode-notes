解法：终止条件：1.root是null 2.root是p或者q 
递归左右节点：获得left right
返回值：1.左右都是null说明root的左右子树都不含pq
      2.左右都不是null，说明p和q一个在左一个在右
      3，左为null说明p和q都在右边，就返回右子树
      4.右为null时候说明p和q都在左边，就返回左子树
      
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { 
        if (root == null || p == root || q == root) return root;  //如果root是p或者q就不用往下探索了，不然会遇不到p或者q了
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if (left != null && right != null) return root;
        if (left == null) return right;
        else return left;
    }
}
