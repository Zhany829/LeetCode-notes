解法:serialize的时候用一个""去接节点值,用前序遍历去做dfs递归,如果遇到null了就补一个"None,"上去,否则就把root的值+","拼接上去,还要再拼接上左右儿子的值(递归地拼接),最后返回这个string
反序列时候把string先用,拆分成string数组,再把这个数组对应成list. 对于这个list(里面有None),每个去看第一个元素,如果是None就把他remove再返回null,否则就用带一个元素的值作为root,再递归地拼接左右儿子
要注意的是每次用了root都要把这个元素remove,也就是每次都remove(0). 时间复杂度O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
     // Encodes a tree to a single string.
        public String serialize(TreeNode root) {
            if (root == null) return "None,";
            String leftSerialize = serialize(root.left); //左子树的序列化字符串
            String rightSerialize = serialize(root.right); //右子树的序列化字符串
            return root.val + "," + leftSerialize + rightSerialize;
        }

        // Decodes your encoded data to tree.
        /**
         * 构建树的函数 buildTree 接收的 “状态” 是 list 数组，由序列化字符串转成
         * 按照前序遍历的顺序：先构建根节点，再构建左子树、右子树
         * 将 list 数组的首项弹出，它是当前子树的 root 节点
         * 如果它为 'X' ，返回 null
         * 如果它不为 'X'，则为它创建节点，并递归调用 buildTree 构建左右子树，当前子树构建完毕，向上返回
         */
        public TreeNode deserialize(String data) {
            String[] temp = data.split(",");
            LinkedList<String> dp = new LinkedList<>(Arrays.asList(temp));
            return buildTree(dp);
        }
        private TreeNode buildTree(LinkedList<String> list){
            String s = list.poll(); //返回当前结点
            if (s.equals("None")) return null;
            TreeNode node = new TreeNode(Integer.parseInt(s));
            node.left = buildTree(list); //构建左子树
            node.right = buildTree(list); //构建右子树
            return node;
        }
}
