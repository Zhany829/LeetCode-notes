前序:根 左儿子们 右儿子们
中序: 左儿子们 根 右儿子们
后序: 左儿子们 右儿子们 根
解法:前序遍历的第一个节点为root,可以用这个root去找中序遍历的root的位置(所以开始要用一个哈希表存中序遍历的每个节点位置,再去递归),在中序遍历里得到root之后,他的左边都是左儿子,右边都是右儿子
所以可以得到左右儿子的长度.
每次递归两种遍历的数组和各自的左右边界
递归终止条件:前序遍历的左边界大于右边界
每次先用前序左边界获得root,再用这个root获得中序遍历root的位置并用这个节点val构建新的root,再得到中序遍历左边儿子的数量,也就是root位置-左边界.之后对root的左右儿子递归赋值
root的left就是前序遍历的左边界+1(左边界位置上是root)到左边界+左儿子的长度,中序遍历的左边界到root位置-1
root的right是前序遍历的左边界+左儿子长度到右边界,中序遍历的root位置+1到右边界

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private Map<Integer, Integer> indexMap;

    public TreeNode myBuildTree(int[] preorder, int[] inorder, int preorder_left, int preorder_right, int inorder_left, int inorder_right) {
        if (preorder_left > preorder_right) {
            return null;
        }
        // 前序遍历中的第一个节点就是根节点
        int preorder_root = preorder_left;
        // 在中序遍历中定位根节点
        int inorder_root = indexMap.get(preorder[preorder_root]);
        
        // 先把根节点建立出来
        TreeNode root = new TreeNode(preorder[preorder_root]);
        // 得到左子树中的节点数目
        int size_left_subtree = inorder_root - inorder_left;
        // 递归地构造左子树，并连接到根节点
        // 先序遍历中「从 左边界+1 开始的 size_left_subtree」个元素就对应了中序遍历中「从 左边界 开始到 根节点定位-1」的元素
        root.left = myBuildTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left, inorder_root - 1);
        // 递归地构造右子树，并连接到根节点
        // 先序遍历中「从 左边界+1+左子树节点数目 开始到 右边界」的元素就对应了中序遍历中「从 根节点定位+1 到 右边界」的元素
        root.right = myBuildTree(preorder, inorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1, inorder_right);
        return root;
    }

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int n = preorder.length;
        // 构造哈希映射，帮助我们快速定位根节点
        indexMap = new HashMap<Integer, Integer>();
        for (int i = 0; i < n; i++) {
            indexMap.put(inorder[i], i);
        }
        return myBuildTree(preorder, inorder, 0, n - 1, 0, n - 1);
    }
}
