解法1：递归，前序遍历的顺序是中左右，先加自己节点再递归左和右
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        traversal(root, res);
        return res;
    }
    private void traversal(TreeNode root, List<Integer> res) {
        if (root == null) return;
        res.add(root.val);
        traversal(root.left, res);
        traversal(root.right, res);
    }
}


解法2:用stack作dfs，每次先pop，然后判断pop出的是不是null，因为上次加左右儿子时候没有判断是不是null，所以可能加了null
之后再加中，同时把右和左放到stack。先放右因为stack下次遍历可以先遍历左子树

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        while (!s.isEmpty()) {
            TreeNode cur = s.pop();
            if (cur == null) continue;  //之前加了左右儿子时候可能加了null，所以这里要判断一下
            res.add(cur.val);
            s.push(cur.right); //前序遍历顺序是中左右，这里push顺序是中右左，这样能保证左子树先遍历
            s.push(cur.left);
        }
        return res;
    }
}
