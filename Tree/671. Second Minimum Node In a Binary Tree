解法：传root和root的值到递归的方法里，如果到底了，也就是null了也就返回-1。如果当前节点大于根节点直接返回，否则就是当前节点等于根节点，就去两个子树去找，如果两个子树都返回-1，也就是子树都有
大于最小值的节点，则返回最小的那个(这样根节点最小，那么返回的较小的这个就是第二小的了)，否则返回较大的那一个继续找下去

class Solution {
    public int findSecondMinimumValue(TreeNode root) {
        return helper(root,root.val);
    }
    public int helper(TreeNode root,int minVal){
        //叶子端点
        if(root == null){
            return -1;
        }
        //如果当前结点值>根节点，那么不用再遍历它的子节点，直接返回该值
        if(root.val > minVal){
            return root.val;
        }
        //否则，即当前结点值==根节点,则需要在两棵子树找目标值结点
        int l = helper(root.left,minVal);
        int r = helper(root.right,minVal);
        //如果两棵子树均存在大于最小值的节点，那么返回较小的那一个
        if (l != -1 && r != -1) {
            return Math.min(l,r);
        } else { //否则，其余情况均返回较大的那一个
            return Math.max(l,r);
        }
    }
}
