解法1:递归 中序 左中右 也是加中间节点，递归左和右       遍历因为把所有节点遍历了一遍，所以时间复杂度为O(n),用了栈所以空间复杂度为O(n)

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        traversal(root, res);
        return res;
    }
    private void traversal(TreeNode root, List<Integer> res) {
        if (root == null) return;
        traversal(root.left, res);
        res.add(root.val);
        traversal(root.right, res);
    }
}

解法2:while条件变成stack不为空或者当前节点不为null，之后一直往左下遍历同时把节点都加到stack里，到了左下角就把节点pop出一个，同时把这个节点加进去，再把当前节点设置为pop出来的节点的右儿子
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> st = new Stack<>();
        while (!st.isEmpty() || root != null) {
            while (root != null) {
                st.push(root);      //加左
                root = root.left;
            }
            TreeNode cur = st.pop();
            res.add(cur.val);   //左 下轮右
            root = cur.right;   //为了下轮加右
        }
        return res;
    }
}

