解法:中序遍历相当于遍历数组。出现最多的节点可能有多个，所以用list在遍历时候记录。用两个int变量记录当前节点出现次数和最多出现的次数，用pre节点来比较是不是和现在一样，一样次数++。
之后如果当前节点数量小于最大次数就继续，等于就加到list里，如果大于就更新maxCount同时把list清空只加当前节点进去

class Solution {
    int curCnt = 1;
    int maxCnt = 1;
    TreeNode pre = null;
    public int[] findMode(TreeNode root) {
        List<Integer> nums = new ArrayList<>();
        inOrder(root, nums);
        int[] res = new int[nums.size()];
        for (int i = 0; i < res.length; i++) {
            res[i] = nums.get(i);
        }
        return res;
    }
    private void inOrder(TreeNode root, List<Integer> nums) {
        if (root == null) return;
        inOrder(root.left, nums);
        if (pre != null) {
            if (pre.val == root.val) curCnt++;
            else curCnt = 1;
        }
        if (curCnt == maxCnt) {
            nums.add(root.val);
        } else if (curCnt > maxCnt) {
            nums.clear();
            nums.add(root.val);
            maxCnt = curCnt;
        }
        pre = root;
        inOrder(root.right, nums);
    }
}
