解法:中序遍历相当于遍历数组。出现最多的节点可能有多个，所以用list在遍历时候记录。用两个int变量记录当前节点出现次数和最多出现的次数，用pre节点来比较是不是和现在一样，一样次数++。
之后如果当前节点数量小于最大次数就继续，等于就加到list里，如果大于就更新maxCount同时把list清空只加当前节点进去

class Solution {
    TreeNode pre = null;
    int cur = 0;
    int max = 0;
    public int[] findMode(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        dfs(root, list);
        int[] res = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            res[i] = list.get(i);
        }
        return res;
    }
    private void dfs(TreeNode root, List<Integer> list) {
        if (root == null) return;
        dfs(root.left, list);
        if (pre != null) { //pre不是null就更新目前连续的长度
            if (pre.val == root.val) cur++;
            else cur = 0;
        }
        if (cur == max) { // 达到了最大长度才加这个元素
            list.add(root.val);
        } else if (cur > max) { //比最大长度大就让list只有目前这个元素值，并更新最大长度
            list.clear();
            list.add(root.val);
            max = cur;
        }
        pre = root; //更新让下次来比较这次的元素
        dfs(root.right, list);
    }
}
