解法：时空O(n)用一个类封装subtree的节点的和的最小值，根节点和所有节点的和。把根节点传入递归函数，如果根节点是null，则返回substree，里面节点是null，最小和是0，节点和是MAX_VALUE
之后递归左右获得左右subtree，把左右儿子和当前节点的值加起来作为sum和minsum，并把root作为节点去构造返回的subtree。
再去比较左，如果左边minsum比返回节点小，则把返回的subtree的节点设置为左儿子的节点，把minsum设置为左儿子的minSum。再用返回的节点的minsum去和右边的比较，如果右边的小再设置为右边的。三者依次比较

public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the root of the minimum subtree
     */
    public class Result{
        TreeNode node;
        int sum;
        int min;
        public Result(TreeNode node, int sum, int min) {
            this.node = node;
            this.sum = sum;
            this.min = min;
        }
    }
    Result empty = new Result(null, 0, Integer.MAX_VALUE);
    public TreeNode findSubtree(TreeNode root) {
        Result res = visit(root);
        return res.node;
    }
    private Result visit(TreeNode node) {
        if (node == null) return empty;
        Result left = visit(node.left);
        Result right = visit(node.right);
        int sum = node.val + left.sum + right.sum;
        Result res = new Result(node, sum, sum);
        if (res.min > left.min) {
            res.node = left.node;
            res.min = left.min;
        }
        if (res.min > right.min) {
            res.node = right.node;
            res.min = right.min;
        }
        return res;
    }
}
