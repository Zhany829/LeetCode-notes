解法：把每个前项和第一次出现的indx放到哈希表里，每次https://github.com/Zhany829/LeetCode-notes/tree/main/Array%20and%20Matrix如果遇到pre-k这个key则更新max。当然还要检查0..i前项和等于k的情况
之所以仅仅需要记录第一个出现的位置，是因为要保证整个子数组最长，因此只需要记录最前面的位置就好了
class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0, preSum = 0;
        map.put(0, -1);
        for (int i = 0; i < nums.length; i++) {
            preSum += nums[i]; //累加前缀和
            if (!map.containsKey(preSum)) { //确保是第一次出现的位置
                map.put(preSum, i);
            }
            //当前的前缀和 - 之前某时刻的前缀和如果等于目标k值,则该前缀和的长度 - 之前那个前缀和的长度 = 当前连续子数组的长度
            if (map.containsKey(preSum - k)) {
                res = Math.max(res, i - map.get(preSum-k));
            }
        }
        return res;
    }
}

class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        int pre = 0, max = 0;
        //map.put(0, -1);
        for (int i = 0; i < nums.length; i++) {
            pre += nums[i];
            if (pre == k) {
                max = Math.max(max, i+1);
            }
            if (!map.containsKey(pre)) {
                map.put(pre, i);
            }
            if (map.containsKey(pre - k)) {
                max = Math.max(max, i - map.get(pre - k));
            }
        }
        return max;
    }
}
