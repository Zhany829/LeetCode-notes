解法：把每个前项和第一次出现的indx放到哈希表里，每次https://github.com/Zhany829/LeetCode-notes/tree/main/Array%20and%20Matrix如果遇到pre-k这个key则更新max。当然还要检查0..i前项和等于k的情况
之所以仅仅需要记录第一个出现的位置，是因为要保证整个子数组最长，因此只需要记录最前面的位置就好了

class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        int n = nums.length;
        // 哈希表，映射前缀和值到第一次出现的下标位置
        Map<Integer, Integer> preSumIndex = new HashMap<>();
        int ans = 0;
        // 前缀和
        int preSum = 0;
        // 0 出现的位置在 -1 位置处
        preSumIndex.put(0, -1);
        for (int i = 0; i < n; ++i) {
            // 累加前缀和
            preSum += nums[i];
            // 确保记录的是第一次出现的位置
            if (!preSumIndex.containsKey(preSum)) {
                preSumIndex.put(preSum, i);
            }
            // 检查一下是否需要更新答案
            if (preSumIndex.containsKey(preSum - k)) {
                ans = Math.max(ans, i - preSumIndex.get(preSum - k));
            }
        }
        return ans;
    }
}

class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        int pre = 0, max = 0;
        //map.put(0, -1);
        for (int i = 0; i < nums.length; i++) {
            pre += nums[i];
            if (pre == k) {
                max = Math.max(max, i+1);
            }
            if (!map.containsKey(pre)) {
                map.put(pre, i);
            }
            if (map.containsKey(pre - k)) {
                max = Math.max(max, i - map.get(pre - k));
            }
        }
        return max;
    }
}
