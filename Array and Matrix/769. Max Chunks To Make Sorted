解法：如果当前下标i(含)之前的最大值为i，则说明可以切一刀；否则前半部分有大于i的元素，后半部分有小于i的元素，必不满足题意

class Solution {
    public int maxChunksToSorted(int[] arr) {
        int cnt = 0;
        int localMax = arr[0];
        for (int i = 0; i < arr.length; i++) {
        //当遍历到第i个位置时，如果可以切分为块，那前i个位置的最大值一定等于i。
        //否则，一定有比i小的数划分到后面的块，那块排序后，一定不满足升序。
            localMax = Math.max(localMax, arr[i]); //统计前i个元素的最大值，在慢慢等i变大到能分块
            if (localMax == i) cnt++;
        }
        return cnt;
    }
}
