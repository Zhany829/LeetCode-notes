解法1：数组的数字都是1到n，所以右重复数字出现这个数组会成环。用快慢指针方法
假设有这样一个样例：[1,2,3,4,5,6,7,8,9,5]。
如果我们按照上面的循环下去就会得到这样一个路径：1 2 3 4 [5 6 7 8 9] [5 6 7 8 9] [5 6 7 8 9]. . .
这样就有了一个环，也就是 6 7 8 9。pointer 会一直在环中循环的前进。
设置两个一快(fast)一慢(slow)两个指针，一个每次走两步，一个每次走一步，这样让他们一直走下去，直到他们在重复的序列中相遇slow 和 fast 会在环中相遇，
先假设一些量：起点到环的入口长度为 m，环的周长为 c，在 fast 和 slow 相遇时 slow 走了 n 步。则 fast 走了 2n 步，fast 比 slow 多走了 n 步，而这 n 步全用在了在环里循环（n%c==0）。
当 fast 和 last 相遇之后，我们设置第三个指针 finder，它从起点开始和 slow(在 fast 和 slow 相遇处)同步前进，当 finder 和 slow 相遇时，就是在环的入口处相遇，也就是重复的那个数字相遇。
为什么 finder 和 slow 相遇在入口:
fast 和 slow 相遇时，slow 在环中行进的距离是 n-m，其中 n%c==0。这时我们再让 slow 前进 m 步——也就是在环中走了 n 步了。而 n%c==0 即 slow 在环里面走的距离是环的周长的整数倍，就回到了环的入口了，而入口就是重复的数字。
我们不知道起点到入口的长度 m，所以弄个 finder 和 slow 一起走，他们必定会在入口处相遇。

fast 与 slow 的第一次相遇不一定在入口处

class Solution {
    public int findDuplicate(int[] nums) {
        int fast = 0, slow = 0;
        while (true) {
            fast = nums[nums[fast]];
            slow = nums[slow];
            if (fast == slow) { 
                int finder = 0;
                while (finder != slow) { //相遇地方就是环开始的地方 也就是重复的点
                    finder = nums[finder];
                    slow = nums[slow];
                }
                break;
            }
        }
        return slow;
    }
}

解法2：双指针，每次取一个中间数，之后遍历这个数组，找>=这个中间数的值的个数，如果个数>这个中间数则说明重复的数在右边把右指针向左移，因为计数是看比mid小于或等于的数有多少，如果多了说明左边肯定有
重复才导致这样
class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
        int l = 1, r = n - 1;
        while (l <= r) {
            int mid = l + (r-l)/2;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                if (nums[i] <= mid) cnt++;
            }
            if (cnt <= mid) l = mid+1; //重复的右边，因为左边数字没超过mid
            else r = mid-1;
        }
        return l;
    }
}
