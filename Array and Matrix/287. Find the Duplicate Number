解法1：数组的数字都是1到n，所以右重复数字出现这个数组会成环。用快慢指针方法，如果两指针相交，
class Solution {
    public int findDuplicate(int[] nums) {
        int fast = 0, slow = 0;
        while (true) {
            fast = nums[nums[fast]];
            slow = nums[slow];
            if (fast == slow) { 
                fast = 0;
                while (fast != slow) { //相遇地方就是环开始的地方 也就是重复的点
                    fast = nums[fast];
                    slow = nums[slow];
                }
                break;
            }
        }
        return slow;
    }
}

解法2：双指针，每次取一个中间数，之后遍历这个数组，找>=这个中间数的值的个数，如果个数>这个中间数则说明重复的数在右边把右指针向左移，因为计数是看比mid小于或等于的数有多少，如果多了说明左边肯定有
重复才导致这样
class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
        int l = 1, r = n - 1;
        while (l <= r) {
            int mid = l + (r-l)/2;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                if (nums[i] <= mid) cnt++;
            }
            if (cnt <= mid) l = mid+1; //重复的右边，因为左边数字没超过mid
            else r = mid-1;
        }
        return l;
    }
}
