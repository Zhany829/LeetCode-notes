解法1：合并排序
class Solution {
    public int[] sortArray(int[] nums) {
        int l = 0, r = nums.length-1;
        mSort(nums, l, r);
        return nums;
    }
    private void mSort(int[] nums, int l, int r) {
        if (l < r) {
            int mid = l + (r-l) / 2;
            mSort(nums, l, mid); //递归左边
            mSort(nums, mid+1, r);
            merge(nums, l, mid, r); //合并
        }
    }
    private void merge(int[] nums, int l, int mid, int r) {
        int idx = 0;
        int[] tmp = new int[r-l+1];
        int i = l, j = mid+1;
        while (i <= mid && j <= r) { //放到末尾
            if (nums[i] < nums[j]) tmp[idx++] = nums[i++];
            else tmp[idx++] = nums[j++];
        }
        while (i <= mid) tmp[idx++] = nums[i++]; //放完
        while (j <= r) tmp[idx++] = nums[j++];
        for (int val : tmp) {
            nums[l++] = val;
        }
    }
}
解法2：快速排序
class Solution {
    public int[] sortArray(int[] nums) {
        qSort(nums, 0, nums.length-1);
        return nums;
    }
    private void qSort(int[] nums, int head, int tail) {
        if (head > tail || nums.length < 1) return;
        int left = head, right = tail;
        int pivot = nums[left];
        while (left <= right) {
            while (nums[left] < pivot && left < tail) left++; //左指针走到比pivot大的地方
            while (nums[right] > pivot && right > head) right--;//右指针走到比pivot小的地方
            if (left <= right) { //交换left和right上的元素
                swap(nums, left, right);
                left++;
                right--;
            } 
        }
        qSort(nums, left, tail); //对partition完的两部分进行排序
        qSort(nums, head, right);
    }
    private void swap(int[] nums, int l, int r) {
        int tmp = nums[l];
        nums[l] = nums[r];
        nums[r] = tmp;
    }
}
解法3：堆排序

