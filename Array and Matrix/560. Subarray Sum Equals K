解法：用前缀和+哈希表优化。这个问题相当于把求多个数加起来等于k的数量转化成pre[i] - k = pre[j]，前面某些数加上这个正好等于k，有点类似两数之和。
哈希表里key是当前所有数的总和，value是当前和出现的次数。
先在哈希表放上(0,1)关于mp.put(0, 1); 这一行的作用就是为了应对 nums[0] +nums[1] + ... + nums[i] == k 的情况的, 也就是从下标 0 累加到下标 i, 
举个例子说明, 如数组 [1, 2, 3, 6], 那么这个数组的累加和数组为 [1, 3, 6, 12] 
如果 k = 6, 假如map中没有预先 put 一个 (0, 1) , 如果此时我们来到了累加和为 6 的位置, 这时map中的情况是 (1, 1), (3, 1), 而 mp.containsKey(pre - k) , 这时 pre - k 也就是 6 - 6 = 0, 
因为 map 中没有 (0, 1) 所以 count 的值没有加一, 其实这个时候我们就是忽略了从下标 0 累加到下标 i 等于 k 的情况, 我们仅仅是统计了从下标大于 0 到某个位置等于 k 的所有答案
之后再开始遍历，每次用一个变量pre记录所有前几项的和。每次先去判断是否有pre-k这个key，有就说明pre到k中间数字有能达到k的，用cnt变量加上pre-k这个key出现的次数。

也可以不放上(0,1)，但每次要判断当前加上当前数的前项和是否等于k，也就是下标0到i是否刚好达到k

至于为什么是 count += mp.get(pre - k); 呢 ? 举个例子: k = 6, 数组 [1, 2, 3, 0, 6] 累加和为: [1, 3, 6, 6, 12], 明显答案应该是 4
当我们来到第一个累加和为 6 的位置上时, pre - k = 0, 也就是说从下标 0 到当前位置的累加和是一个答案, 当来到第二个 6 的位置上时, 也就是说从下标 0 到当前位置的累加和是一个答案
而当来到 12 位置上时, pre - k = 6, 也就是说从累加和为 6 的子数组的后一个位置到当前位置也是满足条件的答案, 而累加和为 6 的子数组只有一个吗 ? 
不 ! 这个例子中他有两个, 所以 count 是 加 mp.get(pre - k);, 而不是加 1,

最后再更新哈希表里pre的value，之前没有，value就是1，否则就是之前的value+1，因为可能当前数是负数就会导致前项和之前就有过

public int subarraySum(int[] nums, int k) {
        // hash
        // 记录合适的连续字符串数量
        int count=0;
        // 记录前面数字相加之和
        int pre=0;
        // map记录前几个数字之和为K出现相同和的次数为V
        HashMap<Integer,Integer> map = new HashMap<>();
        // 初始化
        map.put(0,1);
        for (int i = 0; i < nums.length; i++) {
            pre+= nums[i];
           // 前缀和
            // 设
            // pre[i]=pre[i−1]+nums[i]
            // 由于补上了0，1这个情况 问题由多少个连续数字之和等于k 转为
            // pre[i]−pre[j−1]==k （前缀和之差为k，代表这两个前缀和中间的数字相加就是K）
            // 如果前面某些数字之和加上这个数字正好等于K（存在一个数字加上nums[i]结果为K
            // 说明找到了
            if (map.containsKey(pre-k)){
                // 累计
                count+=map.get(pre-k);
            }
            // 计算新的和放入map
            map.put(pre,map.getOrDefault(pre,0)+1);
        }
        return count;
    }
    
    class Solution {
    public int subarraySum(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        int cnt = 0, pre = 0;
        //map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            pre += nums[i];
            if (pre == k) cnt++;
            if (map.containsKey(pre - k)) {
                cnt += map.get(pre-k);
            }
            map.put(pre, map.getOrDefault(pre ,0) + 1);
        }
        return cnt;
    }
}
