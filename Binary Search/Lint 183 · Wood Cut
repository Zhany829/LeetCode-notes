解法：设置右边界为最大的木头作为每次切的数量，之后用mid作为每次切的数，返回要切的次数，
如果要切的次数大于等于k则把左边界往右让每次切的量变大来减小切的次数，同时这个时候说明切的量比较小，就要更新最大的值，因为这个时候切的量不会超过最终答案。否则调整右指针

public class Solution {
    /**
     * @param L: Given n pieces of wood with length L[i]
     * @param k: An integer
     * @return: The maximum length of the small pieces
     */
    public int woodCut(int[] L, int k) {
        // write your code here
        int l = 1, r = Integer.MAX_VALUE;
        int max = 0;
        while (l < r) {
            int mid = l + (r-l)/2;
            if (isValid(L, k, mid)) {
                l = mid + 1;
                max = Math.max(max, mid); //记录最大的可切长度
            }
            else r = mid;
        }
        return max;
    }
    private boolean isValid(int[] L, int k, int total) {
        int cnt = 0;
        for (int num : L) {
            cnt += num / total;  // 木头长度和切的一样，则直接算做1段，多一点也只算做1段
        }
        return cnt >= k;
    }
}
