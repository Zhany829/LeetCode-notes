二分法，但找到mid位置==target时候先用res记录mid，再判断找first还是last的target的位置，
如果是找first，则把r=mid-1，反之l=mid+1去找，即使这个mid正好满足first/last，也会因为while条件不满足而停止，最后返回res。
所以一共用两次二分查找，每次传入参数(findLeft)不同。主要就是找到一个target先用来锁定左/右边界，再去找
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res = new int[2];
        boolean findFirst = true;
        res[0] = find(nums, target, findFirst);
        res[1] = find(nums, target, !findFirst);
        return res;
    }
    private int find(int[] nums, int target, boolean findFirst) {
        int l = 0, r = nums.length-1;
        int res = -1;
        while (l <= r) {
            int mid = l + (r-l)/2;
            if (nums[mid] < target) l = mid + 1;
            else if (nums[mid] > target) r = mid - 1;
            else {
                res = mid;
                if (findFirst) r = mid - 1; //如果当前要找第一个，则会让让循环停止
                else l = mid + 1;
            }
        }
        return res;
    }
}
