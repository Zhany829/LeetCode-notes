解法1:分mid和左/右元素相等or都不相等的3种情况，先去看mid和左边一不一样，如果一样，再判断左边除去mid一样元素的元素个数是不是偶数，
如果是就说明single element在后边。Mid和右边一样同理。如果mid和左右元素都不相等则说明mid就是single元素

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = 0, r = nums.length-1;
        while (l < r) {
            int mid = l +(r-l)/2;
            if (nums[mid] == nums[mid-1]) {
                if ((mid - l) % 2 == 0) r = mid - 2;
                else l = mid + 1;
            } else if (nums[mid] == nums[mid+1]) {
                if ((r - mid) % 2 == 0) l = mid + 2;
                else r = mid - 1;
            } else {
                return nums[mid];
            }
    }
    return nums[l];
}
}

解法2: 令 index 为 Single Element 在数组中的位置。在 index 之后，数组中原来存在的成对状态被改变。如果 m 为偶数，并且 m + 1 < index，那么 nums[m] == nums[m + 1]；m + 1 >= index，
那么 nums[m] != nums[m + 1]。
从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 index 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 index 所在的数组位置为 [l, m]，此时令 h = m。
因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l < h 这种形式

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = 0, r = nums.length-1;
        while (l < r) {
            int mid = l +(r-l)/2;
            if (mid % 2 == 1) mid -= 1;
            if (nums[mid] == nums[mid+1]) {
                l = mid + 2;
            } else {
                r = mid;
            }
        }
        return nums[l];
    }
}
