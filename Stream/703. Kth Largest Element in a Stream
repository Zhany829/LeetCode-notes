解法：我们可以使用一个大小为 kk 的优先队列来存储前 kk 大的元素，其中优先队列的队头为队列中最小的元素，也就是第 kk 大的元素。
在单次插入的操作中，我们首先将元素 \textit{val}val 加入到优先队列中。如果此时优先队列的大小大于 kk，我们需要将优先队列的队头元素弹出，以保证优先队列的大小为 k
时间O(nlogk) 空间O(n)
[3,[4, 5, 8, 2]], [3], [5], [10], [9], [4]
刚开始是2458，但在最后一次add后把2移除了，peek的就是第三大的4，之后继续add3，3458,把3移除，peek还是4，之后add5，变成4558，把4移除，peek变成5，
所以最小堆可以维持顶端是第k大的，因为k+1大到最大的数是不动的

class KthLargest {
    int k;
    PriorityQueue<Integer> queue;
    public KthLargest(int k, int[] nums) {
        this.k = k;
        this.queue = new PriorityQueue<>();
        for (int num : nums) {
            add(num);
        }
    }
    
    public int add(int val) {
        queue.offer(val);
        if (queue.size() > k) queue.poll();
        return queue.peek();
    }
}
