解法1:递归，如果有一个链表是null就返回另一个。之后比较两个链表的节点值，如果l1的值小，l1.next就等于递归l1.next和l2后的值，再返回l1，反之亦然

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}
解法2:用一个cur去遍历两个链表，把小的节点接上，同时每次都要更新自己和被接的结点，结束之后再接上没接完的
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode cur = new ListNode(-1);
        ListNode res = cur;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                cur.next = l1;
                cur = cur.next;
                l1 = l1.next;
            } else {
                cur.next = l2;
                cur = cur.next;
                l2 = l2.next;
            }
        }
        if (l1 == null) cur.next = l2;
        if (l2 == null) cur.next = l1;
        return res.next;
    }
}
