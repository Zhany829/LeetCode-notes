时间：O(max(m, n)) 空间O(1)
解法：用head和tail两个节点，l1和l2每次计算一个sum%10作为新节点值，sum/10作为carry，也就是进位的值. 当head是null就把新节点给head和tail，否则就在tail后面新建一个节点并且移动tail
再把l1和l2都往后移动，最后还要看tail>0的话再新增一个节点为carry值

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = null, tail = null;
        int carry = 0;
        while (l1 != null || l2 != null) {
            int x = l1 == null ? 0 : l1.val;
            int y = l2 == null ? 0 : l2.val;
            int sum = x + y + carry;
            if (head == null) {
                head = tail = new ListNode(sum % 10);
            } else {
                tail.next = new ListNode(sum % 10);
                tail = tail.next;
            }
            carry = sum / 10;
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }
        if (carry > 0) tail.next = new ListNode(carry);
        return head;
    }
}
