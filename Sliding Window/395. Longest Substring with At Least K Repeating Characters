解法：因为每个substring里最多有26种字母，所以可以枚举26次，也就是1-26种字符种类的数量，每次枚举都用窗口扫一遍字符串。这是自己加的限制 不然不能用滑动窗口
每当窗口内的字符种类的数量大于外层规定的种类的数量，就开始移动移动左指针，直到substring里字符种类的数量和外层规定的一样。也就是每次移动左指针并且判断移除的字母会不会导致类型的变量--
可以用一个数组里记录每个字母的数量来模拟指针，如果对应字母的index上值=1，则说明记录种类的变量+1，如果值=k则记录达标数量的变量++。
最后看当前substring的字母种类数量=符合k种类的数量 就用两个指针更新res。
其实就是扫26次，每次用字母类型的数量来作为窗口的大小的限制，然后每次去看有着符合当前扫的次数(i)的字母种类次数的substring是不是里面每个字母刚好每个出现k次

class Solution {
    public int longestSubstring(String s, int k) {
        int ans = 0;
        int n = s.length();
        char[] cs = s.toCharArray();
        int[] cnt = new int[26];
        for (int p = 1; p <= 26; p++) {
            Arrays.fill(cnt, 0);
            // tot 代表 [j, i] 区间所有的字符种类数量；sum 代表满足「出现次数不少于 k」的字符种类数量
            for (int i = 0, j = 0, tot = 0, sum = 0; i < n; i++) {
                int u = cs[i] - 'a';
                cnt[u]++;
                // 如果添加到 cnt 之后为 1，说明字符总数 +1
                if (cnt[u] == 1) tot++;
                // 如果添加到 cnt 之后等于 k，说明该字符从不达标变为达标，达标数量 + 1
                if (cnt[u] == k) sum++;
                // 当区间所包含的字符种类数量 tot 超过了当前限定的数量 p，那么我们要删除掉一些字母，即「左指针」右移
                while (tot > p) {
                    int t = cs[j++] - 'a';
                    cnt[t]--;
                    // 如果添加到 cnt 之后为 0，说明字符总数-1
                    if (cnt[t] == 0) tot--;
                    // 如果添加到 cnt 之后等于 k - 1，说明该字符从达标变为不达标，达标数量 - 1
                    if (cnt[t] == k - 1) sum--;
                }
                // 当所有字符都符合要求，更新答案
                if (tot == sum) ans = Math.max(ans, i - j + 1);
            }
        }
        return ans;
    }
}
