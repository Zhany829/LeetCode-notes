解法：先用快速选择找到median，也就是k = nums.length/2，之后遍历数组把和每个数字和median的差的和加起来
用random生成随机pivot的index，这样可以使得第一次选最小的第二次选第二小的这种概率降低
class Solution {
    private static Random random = new Random();
    public int minMoves2(int[] nums) {
        int median = findKth(nums, nums.length/2);
        int res = 0;
        for (int num : nums) {
            res += Math.abs(num-median);
        }
        return res;
    }
    private int findKth(int[] nums, int k) {
        int l = 0, r = nums.length - 1;
        while (l < r) {
            int partition = findPartition(nums, l, r);
            if (k < partition) r = partition - 1;
            else if (k > partition) l = partition + 1;
            else break;
        }
        return nums[k];
    }
    private int findPartition(int[] nums, int l, int r) {
        int leftMark = l, rightMark = r + 1;
        int randomIdx = l + random.nextInt(r-l+1);
        swap(nums, l, randomIdx);
        int pivot = nums[l];
        while (true) {
            while (nums[++leftMark] < pivot && leftMark < r);
            while (nums[--rightMark] > pivot && rightMark > l);
            if (leftMark >= rightMark) break;
            swap(nums, leftMark, rightMark);
        }
        swap(nums, rightMark, l);
        return rightMark;
    }
    private void swap(int[] nums, int l, int r) {
        int temp = nums[l];
        nums[l] = nums[r];
        nums[r] = temp;
    }
}
