解法：原数组：       [1       2       3       4]
左部分的乘积：   1       1      1*2    1*2*3
右部分的乘积： 2*3*4    3*4      4      1
结果：        1*2*3*4  1*3*4   1*2*4  1*2*3*1
从上面的图可以看出，当前位置的结果就是它左部分的乘积再乘以它右部分的乘积。因此需要进行两次遍历，第一次遍历用于求左部分的乘积，第二次遍历在求右部分的乘积的同时，再将最后的计算结果一起求出来

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] products = new int[n];
        Arrays.fill(products, 1);
        int left = 1, right = 1;
        for (int i = 1; i < n; i++) { 
            left *= nums[i-1];  //把当前数左边的乘积收集起来，每轮收集一次
            products[i] *= left;    //乘到对应位置
        }
        for (int i = n-2; i >= 0; i--) {
            right *= nums[i+1];
            products[i] *= right;
        }
        return products;
    }
}
